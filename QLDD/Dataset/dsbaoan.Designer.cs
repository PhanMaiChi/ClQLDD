//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace KPBT.Dataset {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsbaoan")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsbaoan : global::System.Data.DataSet {
        
        private baoanDataTable tablebaoan;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsbaoan() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsbaoan(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["baoan"] != null)) {
                    base.Tables.Add(new baoanDataTable(ds.Tables["baoan"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public baoanDataTable baoan {
            get {
                return this.tablebaoan;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsbaoan cln = ((dsbaoan)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["baoan"] != null)) {
                    base.Tables.Add(new baoanDataTable(ds.Tables["baoan"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablebaoan = ((baoanDataTable)(base.Tables["baoan"]));
            if ((initTable == true)) {
                if ((this.tablebaoan != null)) {
                    this.tablebaoan.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsbaoan";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsbaoan.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablebaoan = new baoanDataTable();
            base.Tables.Add(this.tablebaoan);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializebaoan() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsbaoan ds = new dsbaoan();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void baoanRowChangeEventHandler(object sender, baoanRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class baoanDataTable : global::System.Data.TypedTableBase<baoanRow> {
            
            private global::System.Data.DataColumn columnidbaoan;
            
            private global::System.Data.DataColumn columnmshs;
            
            private global::System.Data.DataColumn columntenhs;
            
            private global::System.Data.DataColumn columntenphong;
            
            private global::System.Data.DataColumn columnntan;
            
            private global::System.Data.DataColumn columnthu;
            
            private global::System.Data.DataColumn columntuanthu;
            
            private global::System.Data.DataColumn columnBS;
            
            private global::System.Data.DataColumn columnBC;
            
            private global::System.Data.DataColumn columnBT;
            
            private global::System.Data.DataColumn columnMA;
            
            private global::System.Data.DataColumn columnGC;
            
            private global::System.Data.DataColumn columnBS1;
            
            private global::System.Data.DataColumn columnBC1;
            
            private global::System.Data.DataColumn columnBT1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanDataTable() {
                this.TableName = "baoan";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal baoanDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected baoanDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn idbaoanColumn {
                get {
                    return this.columnidbaoan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mshsColumn {
                get {
                    return this.columnmshs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tenhsColumn {
                get {
                    return this.columntenhs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tenphongColumn {
                get {
                    return this.columntenphong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ntanColumn {
                get {
                    return this.columnntan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn thuColumn {
                get {
                    return this.columnthu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tuanthuColumn {
                get {
                    return this.columntuanthu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BSColumn {
                get {
                    return this.columnBS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BCColumn {
                get {
                    return this.columnBC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BTColumn {
                get {
                    return this.columnBT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAColumn {
                get {
                    return this.columnMA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GCColumn {
                get {
                    return this.columnGC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BS1Column {
                get {
                    return this.columnBS1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BC1Column {
                get {
                    return this.columnBC1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BT1Column {
                get {
                    return this.columnBT1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanRow this[int index] {
                get {
                    return ((baoanRow)(this.Rows[index]));
                }
            }
            
            public event baoanRowChangeEventHandler baoanRowChanging;
            
            public event baoanRowChangeEventHandler baoanRowChanged;
            
            public event baoanRowChangeEventHandler baoanRowDeleting;
            
            public event baoanRowChangeEventHandler baoanRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddbaoanRow(baoanRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanRow AddbaoanRow(string mshs, string tenhs, string tenphong, System.DateTime ntan, string thu, short tuanthu, short BS, short BC, short BT, double MA, string GC, bool BS1, bool BC1, bool BT1) {
                baoanRow rowbaoanRow = ((baoanRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        mshs,
                        tenhs,
                        tenphong,
                        ntan,
                        thu,
                        tuanthu,
                        BS,
                        BC,
                        BT,
                        MA,
                        GC,
                        BS1,
                        BC1,
                        BT1};
                rowbaoanRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowbaoanRow);
                return rowbaoanRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanRow FindByidbaoan(int idbaoan) {
                return ((baoanRow)(this.Rows.Find(new object[] {
                            idbaoan})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                baoanDataTable cln = ((baoanDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new baoanDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnidbaoan = base.Columns["idbaoan"];
                this.columnmshs = base.Columns["mshs"];
                this.columntenhs = base.Columns["tenhs"];
                this.columntenphong = base.Columns["tenphong"];
                this.columnntan = base.Columns["ntan"];
                this.columnthu = base.Columns["thu"];
                this.columntuanthu = base.Columns["tuanthu"];
                this.columnBS = base.Columns["BS"];
                this.columnBC = base.Columns["BC"];
                this.columnBT = base.Columns["BT"];
                this.columnMA = base.Columns["MA"];
                this.columnGC = base.Columns["GC"];
                this.columnBS1 = base.Columns["BS1"];
                this.columnBC1 = base.Columns["BC1"];
                this.columnBT1 = base.Columns["BT1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnidbaoan = new global::System.Data.DataColumn("idbaoan", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnidbaoan);
                this.columnmshs = new global::System.Data.DataColumn("mshs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmshs);
                this.columntenhs = new global::System.Data.DataColumn("tenhs", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntenhs);
                this.columntenphong = new global::System.Data.DataColumn("tenphong", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntenphong);
                this.columnntan = new global::System.Data.DataColumn("ntan", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnntan);
                this.columnthu = new global::System.Data.DataColumn("thu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnthu);
                this.columntuanthu = new global::System.Data.DataColumn("tuanthu", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntuanthu);
                this.columnBS = new global::System.Data.DataColumn("BS", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBS);
                this.columnBC = new global::System.Data.DataColumn("BC", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBC);
                this.columnBT = new global::System.Data.DataColumn("BT", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBT);
                this.columnMA = new global::System.Data.DataColumn("MA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMA);
                this.columnGC = new global::System.Data.DataColumn("GC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGC);
                this.columnBS1 = new global::System.Data.DataColumn("BS1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBS1);
                this.columnBC1 = new global::System.Data.DataColumn("BC1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBC1);
                this.columnBT1 = new global::System.Data.DataColumn("BT1", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBT1);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnidbaoan}, true));
                this.columnidbaoan.AutoIncrement = true;
                this.columnidbaoan.AutoIncrementSeed = -1;
                this.columnidbaoan.AutoIncrementStep = -1;
                this.columnidbaoan.AllowDBNull = false;
                this.columnidbaoan.Unique = true;
                this.columnmshs.MaxLength = 50;
                this.columntenhs.MaxLength = 250;
                this.columntenphong.MaxLength = 250;
                this.columnthu.MaxLength = 50;
                this.columnGC.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanRow NewbaoanRow() {
                return ((baoanRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new baoanRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(baoanRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.baoanRowChanged != null)) {
                    this.baoanRowChanged(this, new baoanRowChangeEvent(((baoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.baoanRowChanging != null)) {
                    this.baoanRowChanging(this, new baoanRowChangeEvent(((baoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.baoanRowDeleted != null)) {
                    this.baoanRowDeleted(this, new baoanRowChangeEvent(((baoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.baoanRowDeleting != null)) {
                    this.baoanRowDeleting(this, new baoanRowChangeEvent(((baoanRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovebaoanRow(baoanRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsbaoan ds = new dsbaoan();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "baoanDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class baoanRow : global::System.Data.DataRow {
            
            private baoanDataTable tablebaoan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal baoanRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablebaoan = ((baoanDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int idbaoan {
                get {
                    return ((int)(this[this.tablebaoan.idbaoanColumn]));
                }
                set {
                    this[this.tablebaoan.idbaoanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mshs {
                get {
                    try {
                        return ((string)(this[this.tablebaoan.mshsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mshs\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.mshsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tenhs {
                get {
                    try {
                        return ((string)(this[this.tablebaoan.tenhsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tenhs\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.tenhsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tenphong {
                get {
                    try {
                        return ((string)(this[this.tablebaoan.tenphongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tenphong\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.tenphongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ntan {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tablebaoan.ntanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ntan\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.ntanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string thu {
                get {
                    try {
                        return ((string)(this[this.tablebaoan.thuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'thu\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.thuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short tuanthu {
                get {
                    try {
                        return ((short)(this[this.tablebaoan.tuanthuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tuanthu\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.tuanthuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short BS {
                get {
                    try {
                        return ((short)(this[this.tablebaoan.BSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BS\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.BSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short BC {
                get {
                    try {
                        return ((short)(this[this.tablebaoan.BCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BC\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.BCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short BT {
                get {
                    try {
                        return ((short)(this[this.tablebaoan.BTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BT\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.BTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MA {
                get {
                    try {
                        return ((double)(this[this.tablebaoan.MAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MA\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.MAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GC {
                get {
                    try {
                        return ((string)(this[this.tablebaoan.GCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GC\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.GCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BS1 {
                get {
                    try {
                        return ((bool)(this[this.tablebaoan.BS1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BS1\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.BS1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BC1 {
                get {
                    try {
                        return ((bool)(this[this.tablebaoan.BC1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BC1\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.BC1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool BT1 {
                get {
                    try {
                        return ((bool)(this[this.tablebaoan.BT1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BT1\' in table \'baoan\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablebaoan.BT1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmshsNull() {
                return this.IsNull(this.tablebaoan.mshsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmshsNull() {
                this[this.tablebaoan.mshsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstenhsNull() {
                return this.IsNull(this.tablebaoan.tenhsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettenhsNull() {
                this[this.tablebaoan.tenhsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstenphongNull() {
                return this.IsNull(this.tablebaoan.tenphongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettenphongNull() {
                this[this.tablebaoan.tenphongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsntanNull() {
                return this.IsNull(this.tablebaoan.ntanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetntanNull() {
                this[this.tablebaoan.ntanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsthuNull() {
                return this.IsNull(this.tablebaoan.thuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetthuNull() {
                this[this.tablebaoan.thuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstuanthuNull() {
                return this.IsNull(this.tablebaoan.tuanthuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettuanthuNull() {
                this[this.tablebaoan.tuanthuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBSNull() {
                return this.IsNull(this.tablebaoan.BSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBSNull() {
                this[this.tablebaoan.BSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBCNull() {
                return this.IsNull(this.tablebaoan.BCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBCNull() {
                this[this.tablebaoan.BCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBTNull() {
                return this.IsNull(this.tablebaoan.BTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBTNull() {
                this[this.tablebaoan.BTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANull() {
                return this.IsNull(this.tablebaoan.MAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANull() {
                this[this.tablebaoan.MAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGCNull() {
                return this.IsNull(this.tablebaoan.GCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGCNull() {
                this[this.tablebaoan.GCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBS1Null() {
                return this.IsNull(this.tablebaoan.BS1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBS1Null() {
                this[this.tablebaoan.BS1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBC1Null() {
                return this.IsNull(this.tablebaoan.BC1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBC1Null() {
                this[this.tablebaoan.BC1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBT1Null() {
                return this.IsNull(this.tablebaoan.BT1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBT1Null() {
                this[this.tablebaoan.BT1Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class baoanRowChangeEvent : global::System.EventArgs {
            
            private baoanRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanRowChangeEvent(baoanRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public baoanRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591